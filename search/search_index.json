{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#python-pyenv-poetry-template","title":"Python Pyenv Poetry Template","text":"<p>A template repository for Python projects using Pyenv and Poetry.</p>"},{"location":"#makefile","title":"Makefile","text":"<p>The project relies heavily on <code>make</code>, which is used to run all commands. It has been tested on macOS and Ubuntu 22.04. Windows users are strongly encouraged to install WSL.</p> <p>Run <code>make</code> to see the list of the available targets.</p> <pre><code>$ make\n\nUsage:\n  make [target] [ARGS=\"...\"]\n\nInfo\n  help                  Show this help message\n  info                  Show development environment info\nSystem\n  python                Check if Python is installed\n  virtualenv            Check if virtualenv exists and activate it - create it if not\n  poetry                Check if Poetry is installed\n  poetry-update         Update Poetry\nProject\n  project/install       Install the project for development\n  project/production    Install the project for production\n  project/update        Update the project\n  project/clean         Clean the project - removes all cache dirs and stamp files\n  project/reset         Cleans plus removes the virtual environment (use ARGS=\"hard\" to re-initialize the project)\n  project/run           Run the project\n  project/tests         Run the tests\n  project/build         Build the project as a package\n  project/buildall      Build the project package and generate the documentation\n  project/publish       Publish the project to PyPI\n  project/publishall    Publish the project package to PyPI and the documentation to GitHub Pages\n  project/deps-export   Export the project's dependencies to requirements*.txt files\nCheck\n  check/format          Format the code\n  check/lint            Lint the code\n  check/precommit       Run all pre-commit checks\nRelease\n  release/version       Tag a new release version\n  release/publish       Push the tagged version to origin - triggers the release and docker actions\nDocker\n  docker/build          Build the Docker image\n  docker/run            Run the Docker container\n  docker/all            Build and run the Docker container\n  docker/stop           Stop the Docker container\n  docker/remove         Remove the Docker image, container, and volumes\nDocumentation\n  docs/build            Generate the project documentation\n  docs/serve            Serve the project documentation locally\n  docs/publish          Publish the project documentation to GitHub Pages (use ARGS=\"--force\" to force the deployment)\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<p>This is a template repository, so first things first, you create a new GitHub repository and choose this as its template. After that, follow the installation steps below.</p> <ol> <li>Clone the repository: <code>git clone https://github.com/&lt;your-github-name&gt;/&lt;your-project-name&gt;.git</code></li> <li>Navigate to the project directory: <code>cd &lt;your-project-name&gt;</code></li> <li> <p>Check the status of the dev environment: <code>make info</code> will list the tools currently installed and the default value of project vars, as in the example below:</p> <pre><code>System:\n  OS: Darwin\n  Shell: /bin/bash - GNU bash, version 3.2.57(1)-release (arm64-apple-darwin23)\n  Make: GNU Make 3.81\n  Git: git version 2.39.3 (Apple Git-146)\nProject:\n  Project name: python_pyenv_poetry_template\n  Project description: 'A GitHub template for Python projects using Pyenv and Poetry'\n  Project author: Fabio Calefato (bateman &lt;fcalefato@gmail.com&gt;)\n  Project version: 0.9.0\n  Project license: MIT\n  Project repository: https://github.com/bateman/python_pyenv_poetry_template\n  Project directory: /Users/fabio/Dev/git/python_pyenv_poetry_template\nPython:\n  Python version: 3.12.1\n  Pyenv version: pyenv 2.3.36\n  Pyenv root: /Users/fabio/.pyenv\n  Pyenv virtualenv name: venvp3t\n  Poetry version: Poetry (version 1.8.2)\nDocker:\n  Docker: Docker version 25.0.3, build 4debf41\n  Docker Compose: Docker Compose version v2.24.6-desktop.1\n  Docker image name: p3t\n  Docker container name: p3t\n</code></pre> </li> <li> <p>If any of the needed tools are missing, it will be marked as 'not installed'. Install them and re-run <code>make info</code> to ensure the tools are now correctly installed and in your PATH.</p> </li> <li> <p>Update the project variables values by editing <code>pyproject.toml</code>. In addition, you can add any of the variables in the list below to a <code>Makefile.env</code> file to override the default values used in the  <code>Makefile</code>. You can check the variables configuration using <code>make info</code>.</p> <pre><code>PYTHON_VERSION=3.12.1\nPYENV_VIRTUALENV_NAME=venvp3t\nDOCKER_CONTAINER_NAME=p3t\nDOCKER_IMAGE_NAME=p3t\n</code></pre> </li> <li> <p>To create the virtual environment, run <code>make virtualenv</code>. Note that this will also check for the requested Python version; if not available, it will ask you to use <code>pyenv</code> to install it.</p> </li> <li>To complete the installation for development purposes, run <code>make project/install</code> -- this will install all development dependencies. Otherwise, for production purposes only, run <code>make project/production</code>.</li> </ol> <p>Tip</p> <p>The installation step will install some 'default' dependencies, such as <code>rich</code> and <code>pretty-errors</code>, but also dev-dependecies, such as <code>ruff</code> and <code>pytest</code>. Edit the <code>pyproject.toml</code> to add/remove dependencies before running <code>make project/install</code>. Otherwise, you can add and remove dependencies later using <code>poetry add</code> and <code>poetry remove</code> commands.</p> <p>Note</p> <p>The <code>PROJECT_NAME</code> var will be converted to lowercase and whitespaces will be replaced by <code>_</code>. This value will be the name of your project module.</p> <p>Caution</p> <p>The <code>Makefile.env</code> should specify at least the <code>PYTHON_VERSION=...</code>. Otherwise, the GitHub Actions will fail. Also, make sure that the Python version specified in <code>Makefile.env</code> (e.g., 3.12.1) satisfies the requirements in <code>pyproject.toml</code> file (e.g., python = \"^3.12\").</p>"},{"location":"#development","title":"Development","text":"<p>The project uses the following development libraries:</p> <ul> <li><code>ruff</code>: for code linting, formatting, and security analysis.</li> <li><code>mypy</code>: for static type-checking.</li> <li><code>pre-commit</code>: for automating all the checks above before committing.</li> </ul> <p>Tip</p> <p>To manually run code formatting and linting, run <code>make check/format</code> and <code>make check/lint</code>, respectively. To execute all the checks, stage your changes, then run <code>make check/precommit</code>.</p>"},{"location":"#execution","title":"Execution","text":"<ul> <li>To run the project: <code>make project/run</code></li> </ul> <p>Tip</p> <p>Pass parameters using the ARGS variable (e.g., <code>make project/run ARGS=\"--text Ciao --color red\"</code>).</p>"},{"location":"#testing","title":"Testing","text":"<ul> <li>To run the tests: <code>make project/tests</code></li> </ul> <p>Tip</p> <p>Pass parameters using the ARGS variable (e.g., <code>make project/tests ARGS=\"--cov-report=xml\"</code>).</p> <p>Note</p> <p>Tests are executed using <code>pytest</code>. Test coverage is calculated using the plugin <code>pytest-cov</code>.</p> <p>Warning</p> <p>Pushing new commits to GitHub, will trigger the GitHub Action defined in <code>tests.yml</code>, which will upload the coverage report to Codecov. To ensure correct execution, first log in to Codecov and enable the coverage report for your repository; this will generate a <code>CODECOV_TOKEN</code>. Then, add the <code>CODECOV_TOKEN</code> to your repository's 'Actions secrets and variables' settings page.</p>"},{"location":"#update","title":"Update","text":"<p>Run <code>make project/update</code> to update all the dependencies using <code>poetry</code>.</p>"},{"location":"#build","title":"Build","text":"<p>Run <code>make project/build</code> to build the project as a Python package. The <code>*.tar.gz</code> and <code>*.whl</code> will be placed in the <code>BUILD</code> directory (by default <code>dist/</code>).</p> <p>Tip</p> <p>Run <code>make project/buildall</code> to build both the project's wheel and tarball, as well as the documentation site.</p>"},{"location":"#release","title":"Release","text":"<ul> <li>Run <code>make release/version ARGS=\"&lt;semvertag&gt;\"</code> to bump the version of the project and write the new version back to <code>pyproject.toml</code>, where <code>&lt;semvertag&gt;</code> is one of the following rules: <code>patch</code>, <code>minor</code>, <code>major</code>, <code>prepatch</code>, <code>preminor</code>, <code>premajor</code>, <code>prerelease</code>.</li> </ul> <p>The table below illustrates the effect of these rules with concrete examples.</p> Rule Before After <code>major</code> 1.3.0 2.0.0 <code>minor</code> 2.1.4 2.2.0 <code>patch</code> 4.1.1 4.1.2 <code>premajor</code> 1.0.2 2.0.0a0 <code>preminor</code> 1.0.2 1.1.0a0 <code>prepatch</code> 1.0.2 1.0.3a0 <code>prerelease</code> 1.0.2 1.0.3a0 <code>prerelease</code> 1.0.3a0 1.0.3a1 <code>prerelease</code> 1.0.3b0 1.0.3b1 <ul> <li>Run <code>make release/publish</code> to trigger, respectively, the upload of a new release to GitHub and a Docker image to DockerHub by executing the GitHub Actions <code>release.yml</code> and <code>docker.yml</code>, as detailed next.</li> </ul>"},{"location":"#github-actions","title":"GitHub Actions","text":"<p>As shown in the table below, there are four GitHub Actions workflow. Take note on the event triggering the run and the Secrets needed for a succesfull execution.</p> Action name Purpose Runs on Secrets <code>release.yml</code> Release package to PyPI and GitHub \ud83d\udce6 tag push - <code>docker.yml</code> Push image to DockerHub \ud83d\ude80 tag push <code>DOCKERHUB_USERNAME</code>, <code>DOCKERHUB_TOKEN</code> <code>tests.yml</code> Run tests and upload coverage to Codecov \ud83d\udcca commit push on branches != <code>main</code>, manual <code>CODECOV_TOKEN</code> <code>docs.yml</code> Upload documentation to GitHub Pages \ud83d\udcd3 commit push on <code>docs/**</code> path of <code>main</code> branch, manual <code>RELEASE_TOKEN</code> <p>Caution</p> <p>Follow this guide and configure PyPI\u2019s trusted publishing implementation to connect to GitHub Actions CI/CD. Otherwise, the release workflow will fail.</p>"},{"location":"#publish-to-pypi","title":"Publish to PyPI","text":"<p>To manually publish your package to PyPI, run <code>make project/publish</code>. If necessary, this will build the project as a Python package and upload the generated <code>*.tar.gz</code> and <code>*.whl</code> files to PyPI.</p> <p>Tip</p> <p>Run <code>make project/publishall</code> to manually publish the package to PyPI and the documentation site to GitHub Pages.</p> <p>Warning</p> <p>Before trying manually publish your package to PyPI, make sure you have a valid API token. Then, you need manually configure <code>poetry</code> running the following command: <code>poetry config pypi-token.pypi &lt;your-api-token&gt;</code>.</p>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Run <code>make docs/build</code> to build the project documentation using <code>mkdocs</code>. The documentation will be generated from your project files' comments in docstring format, thanks to the <code>mkdocstrings</code> plugin. The documentation files will be stored in the <code>DOCS_SITE</code> directory (by default <code>site/</code>).</li> <li>Run <code>make docs/serve</code> to browse the built site locally, at http://127.0.0.1:8000/your-github-name/your-project-name/</li> <li>Run <code>make docs/publish</code> to publish the documentation site as GitHub pages. The content will be published to a separate branch, named <code>gh-pages</code>. Access the documentation online at https://your-github-name.github.io/your-project-name/</li> </ul> <p>Tip</p> <p>You can edit the <code>mkdocs.yml</code> file to adapt it to your project's specifics. For example, you can change the <code>material</code> theme or adjust the logo and colors. Refer to this guide for more.</p> <p>Note</p> <p>After the first deployment to your GitHub repository, your repository Pages settings (Settings &gt; Pages) will be automatically updated to point to the documentation site content stored in the <code>gh-pages</code> branch.</p> <p>Warning</p> <p>Before being able to succesfully publishing the project documentation to GitHub Pages, you need to add a <code>RELEASE_TOKEN</code> to your repository's 'Actions secrets and variables' settings page. The <code>RELEASE_TOKEN</code> is generated from your GitHub 'Developer Settings' page. Make sure to select the full <code>repo</code> scope when generating it.</p>"},{"location":"#docker","title":"Docker","text":"<ul> <li>To build the Docker container: <code>make docker/build</code></li> <li>To start the Docker container and run the application: <code>make docker/run</code></li> <li>To build and run: <code>make docker/all</code></li> </ul> <p>Note</p> <p>Before building the container, you can edit <code>Makefile.env</code> and change the name of the image and or container (by default they will match the name of your project).</p> <p>Warning</p> <p>Pushing a new tag to GitHub will trigger the GitHub Action defined in <code>docker.yml</code>. To ensure correct execution, you first need to add the <code>DOCKERHUB_USERNAME</code> and <code>DOCKERHUB_TOKEN</code> secrets to your repository's 'Actions secrets and variables' settings page.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! Follow these steps:</p> <ol> <li>Fork the repository.</li> <li>Create a new branch: <code>git checkout -b feature-name</code></li> <li>Make your changes and commit: <code>git commit -m 'Add feature'</code></li> <li>Push to the branch: <code>git push origin feature-name</code></li> <li>Submit a pull request.</li> </ol>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License.</p>"},{"location":"about/","title":"About","text":"<p>P3T - Python Pyenv Poetry Template is a GitHub template project developed and maintained by Fabio Calefato.</p> <p>It is realeased under the MIT License.</p>"},{"location":"config/","title":"Config","text":"<p>Module for handling configuration file.</p> <p>Condigurations are loaded from a JSON file and can be accessed as attributes of the <code>Config</code> class.</p> Example<pre><code>config = Config(\"path/to/config.json\")\nconfig.some_attribute\n</code></pre>"},{"location":"config/#python_pyenv_poetry_template.config.config.Config","title":"<code>Config</code>","text":"<p>The configuration class that handles configuration files.</p>"},{"location":"config/#python_pyenv_poetry_template.config.config.Config.__getattr__","title":"<code>__getattr__(_)</code>","text":"<p>Get the value of an attribute.</p> <p>Returns:</p> Type Description <p><code>None</code> if the attribute is not found.</p>"},{"location":"config/#python_pyenv_poetry_template.config.config.Config.__init__","title":"<code>__init__(filename)</code>","text":"<p>Initialize the Config class by loading configurations from a given file.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>The name of the configuration file.</p> required"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2024 Fabio Calefato</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"logging/","title":"Logger","text":"<p>Module for logging messages with rich formatting.</p> <p>It also includes <code>pretty_errors</code> configuration for better error visualization.</p> <p>             Bases: <code>object</code></p> <p>The logger class for logging messages with rich formatting.</p>"},{"location":"logging/#python_pyenv_poetry_template.logger.logger.Format","title":"<code>Format</code>","text":"<p>             Bases: <code>Enum</code></p> <p>The format class for the logger.</p>"},{"location":"logging/#python_pyenv_poetry_template.logger.logger.Format--attributes","title":"Attributes","text":"<pre><code>DEBUG (str): Grey\nINFO (str): Grey\nWARN (str): Yellow\nERROR (str): Bold red\nCRITICAL (str): Bold red\n</code></pre>"},{"location":"logging/#python_pyenv_poetry_template.logger.logger.Logger","title":"<code>Logger</code>","text":"<p>             Bases: <code>object</code></p> <p>The logger class for logging messages with rich formatting.</p>"},{"location":"logging/#python_pyenv_poetry_template.logger.logger.Logger.__new__","title":"<code>__new__()</code>","text":"<p>Create a new instance of the logger class.</p>"},{"location":"logging/#python_pyenv_poetry_template.logger.logger.Logger.critical","title":"<code>critical(message)</code>","text":"<p>Log a critical message with rich formatting.</p> <pre><code>message (str): The message to log.\n</code></pre>"},{"location":"logging/#python_pyenv_poetry_template.logger.logger.Logger.debug","title":"<code>debug(message)</code>","text":"<p>Log a debug message with rich formatting.</p> <pre><code>message (str): The message to log.\n</code></pre>"},{"location":"logging/#python_pyenv_poetry_template.logger.logger.Logger.error","title":"<code>error(message)</code>","text":"<p>Log an error message with rich formatting.</p> <pre><code>message (str): The message to log.\n</code></pre>"},{"location":"logging/#python_pyenv_poetry_template.logger.logger.Logger.info","title":"<code>info(message)</code>","text":"<p>Log an info message with rich formatting.</p> <pre><code>message (str): The message to log.\n</code></pre>"},{"location":"logging/#python_pyenv_poetry_template.logger.logger.Logger.set_log_level","title":"<code>set_log_level(log_level='')</code>  <code>staticmethod</code>","text":"<p>Set the log level for the logger.</p>"},{"location":"logging/#python_pyenv_poetry_template.logger.logger.Logger.warn","title":"<code>warn(message)</code>","text":"<p>Log a warning message with rich formatting.</p> <pre><code>message (str): The message to log.\n</code></pre>"},{"location":"logging/#python_pyenv_poetry_template.logger.logger.Logger.__new__","title":"<code>__new__()</code>","text":"<p>Create a new instance of the logger class.</p>"},{"location":"logging/#python_pyenv_poetry_template.logger.logger.Logger.critical","title":"<code>critical(message)</code>","text":"<p>Log a critical message with rich formatting.</p> <pre><code>message (str): The message to log.\n</code></pre>"},{"location":"logging/#python_pyenv_poetry_template.logger.logger.Logger.debug","title":"<code>debug(message)</code>","text":"<p>Log a debug message with rich formatting.</p> <pre><code>message (str): The message to log.\n</code></pre>"},{"location":"logging/#python_pyenv_poetry_template.logger.logger.Logger.error","title":"<code>error(message)</code>","text":"<p>Log an error message with rich formatting.</p> <pre><code>message (str): The message to log.\n</code></pre>"},{"location":"logging/#python_pyenv_poetry_template.logger.logger.Logger.info","title":"<code>info(message)</code>","text":"<p>Log an info message with rich formatting.</p> <pre><code>message (str): The message to log.\n</code></pre>"},{"location":"logging/#python_pyenv_poetry_template.logger.logger.Logger.set_log_level","title":"<code>set_log_level(log_level='')</code>  <code>staticmethod</code>","text":"<p>Set the log level for the logger.</p>"},{"location":"logging/#python_pyenv_poetry_template.logger.logger.Logger.warn","title":"<code>warn(message)</code>","text":"<p>Log a warning message with rich formatting.</p> <pre><code>message (str): The message to log.\n</code></pre>"},{"location":"module/","title":"P3T - Python Pyenv Poetry Template","text":"<p>The main class of your application package.</p> <p>This class is used to encapsulate the main functionality of your application. You can define methods and properties here to perform the main tasks of your application.</p> <p>Run the main functionality of your application package.</p> <p>This function is called when your application is run as a package. You can use this function to perform the main tasks of your application.</p>"},{"location":"module/#python_pyenv_poetry_template.main.OneClass.__init__","title":"<code>__init__()</code>","text":"<p>Initialize the main class of your application package.</p> <p>This method is called when an instance of the main class is created. You can use this method to perform any necessary setup for your application.</p>"},{"location":"module/#python_pyenv_poetry_template.main.OneClass.print","title":"<code>print(text='\\nHello, world!', color=f'rgb({128},{128},{128})')</code>","text":"<p>Print a message in a specified color or in a random color if no color is specified.</p> <pre><code>text (Optional[str]): The message to print. Defaults to \"Hello, world!\".\ncolor (Optional[str]): The color to print the message in.\n                       This should be a string specifying a color recognized by the `rich` library,\n                       or an RGB color in the format \"rgb(r,g,b)\" where r, g, and b are integers between 0 and 255.\n                       If this argument is not provided, a mid-grey color rgb(128,128,128) will be generated.\n</code></pre> <pre><code>None\n</code></pre>"}]}